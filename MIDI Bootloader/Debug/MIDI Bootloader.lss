
MIDI Bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003e8  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  00800106  00800106  00000482  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000048e  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d8  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b9  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ea  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063b  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ee       	ldi	r30, 0xE8	; 232
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 30       	cpi	r26, 0x0E	; 14
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
			break;
		}
	}
}

int main(void) {
  f2:	2f 92       	push	r2
  f4:	3f 92       	push	r3
  f6:	4f 92       	push	r4
  f8:	5f 92       	push	r5
  fa:	6f 92       	push	r6
  fc:	7f 92       	push	r7
  fe:	8f 92       	push	r8
 100:	9f 92       	push	r9
 102:	af 92       	push	r10
 104:	bf 92       	push	r11
 106:	cf 92       	push	r12
 108:	df 92       	push	r13
 10a:	ef 92       	push	r14
 10c:	ff 92       	push	r15
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <main+0x26>
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x28>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
uint8_t rx_buffer[2 * (SPM_PAGESIZE + 1)];

void (*main_entry_point)(void) = 0x0000;

inline void init() {
	cli();
 11e:	f8 94       	cli
	//setup SYNC LEDs as outputs
	DDRE |= (1<<Y_LED);
 120:	6a 9a       	sbi	0x0d, 2	; 13
	DDRC |= (1<<R_LED);
 122:	3a 9a       	sbi	0x07, 2	; 7
	MCUSR = 0;
	WDTCSR |= _BV(WDCE) | _BV(WDE);
	WDTCSR = 0;
*/
	init();
	if (bootloader_active()) {
 124:	19 9b       	sbis	0x03, 1	; 3
 126:	40 c1       	rjmp	.+640    	; 0x3a8 <main+0x2b6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	37 ea       	ldi	r19, 0xA7	; 167
 12c:	61 e6       	ldi	r22, 0x61	; 97
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	60 40       	sbci	r22, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x3c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x46>
 138:	00 00       	nop
	uint8_t sysex_commands[2];
	uint8_t current_led = 1;
	uint8_t status = 0;
	uint8_t progress_counter = 0;

	UCSR0A &= ~_BV(U2X0);
 13a:	e0 ec       	ldi	r30, 0xC0	; 192
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	80 83       	st	Z, r24
	UBRR0H = kUartPrescaler >> 8;
 144:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = kUartPrescaler;
 148:	8f e1       	ldi	r24, 0x1F	; 31
 14a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= _BV(RXEN0);
 14e:	e1 ec       	ldi	r30, 0xC1	; 193
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 61       	ori	r24, 0x10	; 16
 156:	80 83       	st	Z, r24
	page = 0;
 158:	10 92 0b 01 	sts	0x010B, r1
 15c:	10 92 0a 01 	sts	0x010A, r1
  uint8_t val = pattern % 4;
  if (val == 0) {
    PORTC &= ~(1<<Y_LED);
    PORTE &= ~(1<<R_LED);
  } else if (val == 1) {
    PORTC |= (1<<Y_LED);
 160:	42 9a       	sbi	0x08, 2	; 8
	PORTE &= ~(1<<R_LED);
 162:	72 98       	cbi	0x0e, 2	; 14
	uint8_t state = MATCHING_HEADER;
	uint8_t checksum = 0;
	uint8_t sysex_commands[2];
	uint8_t current_led = 1;
	uint8_t status = 0;
	uint8_t progress_counter = 0;
 164:	71 2c       	mov	r7, r1
	uint16_t bytes_read = 0;
	uint16_t rx_buffer_index = 0;
	uint8_t state = MATCHING_HEADER;
	uint8_t checksum = 0;
	uint8_t sysex_commands[2];
	uint8_t current_led = 1;
 166:	aa 24       	eor	r10, r10
 168:	a3 94       	inc	r10
inline void midi_rx_loop() {
	uint8_t byte;
	uint16_t bytes_read = 0;
	uint16_t rx_buffer_index = 0;
	uint8_t state = MATCHING_HEADER;
	uint8_t checksum = 0;
 16a:	81 2c       	mov	r8, r1
uint16_t total_bytes = 0;
inline void midi_rx_loop() {
	uint8_t byte;
	uint16_t bytes_read = 0;
	uint16_t rx_buffer_index = 0;
	uint8_t state = MATCHING_HEADER;
 16c:	70 e0       	ldi	r23, 0x00	; 0

uint16_t total_bytes = 0;
inline void midi_rx_loop() {
	uint8_t byte;
	uint16_t bytes_read = 0;
	uint16_t rx_buffer_index = 0;
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
static const uint16_t kUartPrescaler = (F_CPU / (16L * 31250)) - 1;

uint16_t total_bytes = 0;
inline void midi_rx_loop() {
	uint8_t byte;
	uint16_t bytes_read = 0;
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	10 e0       	ldi	r17, 0x00	; 0
	UBRR0L = kUartPrescaler;
	UCSR0B |= _BV(RXEN0);
	page = 0;
	write_status_leds(1);
	while (1) {
		while (!(UCSR0A & _BV(RXC0)));
 176:	a0 ec       	ldi	r26, 0xC0	; 192
 178:	b0 e0       	ldi	r27, 0x00	; 0
		byte = UDR0;
 17a:	86 ec       	ldi	r24, 0xC6	; 198
 17c:	90 e0       	ldi	r25, 0x00	; 0
			if (byte < 0x80) {
				sysex_commands[bytes_read++] = byte;
				if (bytes_read == 2) {
					bytes_read = 0;
					rx_buffer_index = 0;
					checksum = 0;
 17e:	b1 2c       	mov	r11, r1
					state = READING_DATA;
 180:	0f 2e       	mov	r0, r31
 182:	f3 e0       	ldi	r31, 0x03	; 3
 184:	6f 2e       	mov	r6, r31
 186:	f0 2d       	mov	r31, r0
			case READING_COMMAND:
			if (byte < 0x80) {
				sysex_commands[bytes_read++] = byte;
				if (bytes_read == 2) {
					bytes_read = 0;
					rx_buffer_index = 0;
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	40 e0       	ldi	r20, 0x00	; 0
					checksum = 0;
					state = READING_DATA;
				}
				} else {
				state = MATCHING_HEADER;
				current_led = 1;
 18c:	99 24       	eor	r9, r9
 18e:	93 94       	inc	r9
		uint16_t w = *p++;
		w |= (*p++) << 8;
		boot_page_fill(page + i, w);
	}

	boot_page_write(page);
 190:	0f 2e       	mov	r0, r31
 192:	f5 e0       	ldi	r31, 0x05	; 5
 194:	3f 2e       	mov	r3, r31
 196:	f0 2d       	mov	r31, r0
	boot_spm_busy_wait();
	boot_rww_enable();
 198:	0f 2e       	mov	r0, r31
 19a:	f1 e1       	ldi	r31, 0x11	; 17
 19c:	2f 2e       	mov	r2, r31
 19e:	f0 2d       	mov	r31, r0
 1a0:	79 01       	movw	r14, r18
 1a2:	26 c0       	rjmp	.+76     	; 0x1f0 <main+0xfe>
				if (bytes_read == sizeof(sysex_header)) {
					bytes_read = 0;
					state = READING_COMMAND;
				}
				} else {
				bytes_read = 0;
 1a4:	05 2f       	mov	r16, r21
 1a6:	14 2f       	mov	r17, r20
 1a8:	23 c0       	rjmp	.+70     	; 0x1f0 <main+0xfe>
					checksum = 0;
					state = READING_DATA;
				}
				} else {
				state = MATCHING_HEADER;
				current_led = 1;
 1aa:	a9 2c       	mov	r10, r9
					rx_buffer_index = 0;
					checksum = 0;
					state = READING_DATA;
				}
				} else {
				state = MATCHING_HEADER;
 1ac:	7b 2d       	mov	r23, r11
				current_led = 1;
				status = 0;
				bytes_read = 0;
 1ae:	05 2f       	mov	r16, r21
 1b0:	14 2f       	mov	r17, r20
 1b2:	1e c0       	rjmp	.+60     	; 0x1f0 <main+0xfe>
			}
			break;
			
			case READING_COMMAND:
			if (byte < 0x80) {
				sysex_commands[bytes_read++] = byte;
 1b4:	89 01       	movw	r16, r18
 1b6:	1c c0       	rjmp	.+56     	; 0x1f0 <main+0xfe>
						}
						progress_counter = 0;
					}
					status ^= current_led;
					} else {
					current_led = 1;
 1b8:	a9 2c       	mov	r10, r9
					status = 0;
				}
				state = MATCHING_HEADER;
 1ba:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 1bc:	05 2f       	mov	r16, r21
 1be:	14 2f       	mov	r17, r20
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <main+0xfe>
						}
						progress_counter = 0;
					}
					status ^= current_led;
					} else {
					current_led = 1;
 1c2:	a9 2c       	mov	r10, r9
					status = 0;
				}
				state = MATCHING_HEADER;
 1c4:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 1c6:	05 2f       	mov	r16, r21
 1c8:	14 2f       	mov	r17, r20
 1ca:	12 c0       	rjmp	.+36     	; 0x1f0 <main+0xfe>
						}
						progress_counter = 0;
					}
					status ^= current_led;
					} else {
					current_led = 1;
 1cc:	a9 2c       	mov	r10, r9
					status = 0;
				}
				state = MATCHING_HEADER;
 1ce:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 1d0:	05 2f       	mov	r16, r21
 1d2:	14 2f       	mov	r17, r20
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <main+0xfe>
						}
						progress_counter = 0;
					}
					status ^= current_led;
					} else {
					current_led = 1;
 1d6:	a9 2c       	mov	r10, r9
					status = 0;
				}
				state = MATCHING_HEADER;
 1d8:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 1da:	05 2f       	mov	r16, r21
 1dc:	14 2f       	mov	r17, r20
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <main+0xfe>
					status ^= current_led;
					} else {
					current_led = 1;
					status = 0;
				}
				state = MATCHING_HEADER;
 1e0:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 1e2:	05 2f       	mov	r16, r21
 1e4:	14 2f       	mov	r17, r20
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <main+0xfe>
						current_led <<= 1;
						if (current_led == 0) {
							current_led = 1;
							status = 0;
						}
						progress_counter = 0;
 1e8:	7b 2c       	mov	r7, r11
					status ^= current_led;
					} else {
					current_led = 1;
					status = 0;
				}
				state = MATCHING_HEADER;
 1ea:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 1ec:	05 2f       	mov	r16, r21
 1ee:	14 2f       	mov	r17, r20
	UBRR0L = kUartPrescaler;
	UCSR0B |= _BV(RXEN0);
	page = 0;
	write_status_leds(1);
	while (1) {
		while (!(UCSR0A & _BV(RXC0)));
 1f0:	2c 91       	ld	r18, X
 1f2:	22 23       	and	r18, r18
 1f4:	ec f7       	brge	.-6      	; 0x1f0 <main+0xfe>
		byte = UDR0;
 1f6:	fc 01       	movw	r30, r24
 1f8:	60 81       	ld	r22, Z
		total_bytes += 1;
 1fa:	20 91 06 01 	lds	r18, 0x0106
 1fe:	30 91 07 01 	lds	r19, 0x0107
 202:	2f 5f       	subi	r18, 0xFF	; 255
 204:	3f 4f       	sbci	r19, 0xFF	; 255
 206:	30 93 07 01 	sts	0x0107, r19
 20a:	20 93 06 01 	sts	0x0106, r18
		// In case we see a realtime message in the stream, safely ignore it.
		if (byte > 0xf0 && byte != 0xf7) {
 20e:	61 3f       	cpi	r22, 0xF1	; 241
 210:	10 f0       	brcs	.+4      	; 0x216 <main+0x124>
 212:	67 3f       	cpi	r22, 0xF7	; 247
 214:	69 f7       	brne	.-38     	; 0x1f0 <main+0xfe>
			continue;
		}
		switch (state) {
 216:	72 30       	cpi	r23, 0x02	; 2
 218:	99 f0       	breq	.+38     	; 0x240 <main+0x14e>
 21a:	73 30       	cpi	r23, 0x03	; 3
 21c:	49 f1       	breq	.+82     	; 0x270 <main+0x17e>
 21e:	71 11       	cpse	r23, r1
 220:	e7 cf       	rjmp	.-50     	; 0x1f0 <main+0xfe>
			case MATCHING_HEADER:
			if (byte == sysex_header[bytes_read]) {
 222:	f8 01       	movw	r30, r16
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	20 81       	ld	r18, Z
 22a:	62 13       	cpse	r22, r18
 22c:	bb cf       	rjmp	.-138    	; 0x1a4 <main+0xb2>
				++bytes_read;
 22e:	0f 5f       	subi	r16, 0xFF	; 255
 230:	1f 4f       	sbci	r17, 0xFF	; 255
				if (bytes_read == sizeof(sysex_header)) {
 232:	06 30       	cpi	r16, 0x06	; 6
 234:	11 05       	cpc	r17, r1
 236:	e1 f6       	brne	.-72     	; 0x1f0 <main+0xfe>
					bytes_read = 0;
					state = READING_COMMAND;
 238:	72 e0       	ldi	r23, 0x02	; 2
		switch (state) {
			case MATCHING_HEADER:
			if (byte == sysex_header[bytes_read]) {
				++bytes_read;
				if (bytes_read == sizeof(sysex_header)) {
					bytes_read = 0;
 23a:	05 2f       	mov	r16, r21
 23c:	14 2f       	mov	r17, r20
 23e:	d8 cf       	rjmp	.-80     	; 0x1f0 <main+0xfe>
				bytes_read = 0;
			}
			break;
			
			case READING_COMMAND:
			if (byte < 0x80) {
 240:	66 23       	and	r22, r22
 242:	0c f4       	brge	.+2      	; 0x246 <main+0x154>
 244:	b2 cf       	rjmp	.-156    	; 0x1aa <main+0xb8>
				sysex_commands[bytes_read++] = byte;
 246:	98 01       	movw	r18, r16
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	e1 e0       	ldi	r30, 0x01	; 1
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	ec 0f       	add	r30, r28
 252:	fd 1f       	adc	r31, r29
 254:	e0 0f       	add	r30, r16
 256:	f1 1f       	adc	r31, r17
 258:	60 83       	st	Z, r22
				if (bytes_read == 2) {
 25a:	22 30       	cpi	r18, 0x02	; 2
 25c:	31 05       	cpc	r19, r1
 25e:	09 f0       	breq	.+2      	; 0x262 <main+0x170>
 260:	a9 cf       	rjmp	.-174    	; 0x1b4 <main+0xc2>
					bytes_read = 0;
					rx_buffer_index = 0;
					checksum = 0;
 262:	8b 2c       	mov	r8, r11
					state = READING_DATA;
 264:	76 2d       	mov	r23, r6
			case READING_COMMAND:
			if (byte < 0x80) {
				sysex_commands[bytes_read++] = byte;
				if (bytes_read == 2) {
					bytes_read = 0;
					rx_buffer_index = 0;
 266:	e5 2e       	mov	r14, r21
 268:	f4 2e       	mov	r15, r20
			
			case READING_COMMAND:
			if (byte < 0x80) {
				sysex_commands[bytes_read++] = byte;
				if (bytes_read == 2) {
					bytes_read = 0;
 26a:	05 2f       	mov	r16, r21
 26c:	14 2f       	mov	r17, r20
 26e:	c0 cf       	rjmp	.-128    	; 0x1f0 <main+0xfe>
				bytes_read = 0;
			}
			break;

			case READING_DATA:
			if (byte < 0x80) {
 270:	66 23       	and	r22, r22
 272:	dc f0       	brlt	.+54     	; 0x2aa <main+0x1b8>
				if (bytes_read & 1) {
 274:	00 ff       	sbrs	r16, 0
 276:	10 c0       	rjmp	.+32     	; 0x298 <main+0x1a6>
					rx_buffer[rx_buffer_index] |= byte & 0xf;
 278:	6f 70       	andi	r22, 0x0F	; 15
 27a:	f7 01       	movw	r30, r14
 27c:	e4 5f       	subi	r30, 0xF4	; 244
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	20 81       	ld	r18, Z
 282:	62 2b       	or	r22, r18
 284:	60 83       	st	Z, r22
					if (rx_buffer_index < SPM_PAGESIZE) {
 286:	f0 e8       	ldi	r31, 0x80	; 128
 288:	ef 16       	cp	r14, r31
 28a:	f1 04       	cpc	r15, r1
 28c:	08 f4       	brcc	.+2      	; 0x290 <main+0x19e>
						checksum += rx_buffer[rx_buffer_index];
 28e:	86 0e       	add	r8, r22
					}
					++rx_buffer_index;
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	e2 1a       	sub	r14, r18
 294:	f2 0a       	sbc	r15, r18
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <main+0x1b2>
					} else {
					rx_buffer[rx_buffer_index] = (byte << 4);
 298:	f7 01       	movw	r30, r14
 29a:	e4 5f       	subi	r30, 0xF4	; 244
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	62 95       	swap	r22
 2a0:	60 7f       	andi	r22, 0xF0	; 240
 2a2:	60 83       	st	Z, r22
				}
				++bytes_read;
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	a3 cf       	rjmp	.-186    	; 0x1f0 <main+0xfe>
				} else if (byte == 0xf7) {
 2aa:	67 3f       	cpi	r22, 0xF7	; 247
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x1be>
 2ae:	a0 cf       	rjmp	.-192    	; 0x1f0 <main+0xfe>
				if (sysex_commands[0] == 0x7f &&
 2b0:	29 81       	ldd	r18, Y+1	; 0x01
 2b2:	2f 37       	cpi	r18, 0x7F	; 127
 2b4:	59 f4       	brne	.+22     	; 0x2cc <main+0x1da>
 2b6:	2a 81       	ldd	r18, Y+2	; 0x02
 2b8:	21 11       	cpse	r18, r1
 2ba:	7e cf       	rjmp	.-260    	; 0x1b8 <main+0xc6>
				sysex_commands[1] == 0x00 &&
 2bc:	01 2b       	or	r16, r17
 2be:	09 f4       	brne	.+2      	; 0x2c2 <main+0x1d0>
 2c0:	68 c0       	rjmp	.+208    	; 0x392 <main+0x2a0>
						}
						progress_counter = 0;
					}
					status ^= current_led;
					} else {
					current_led = 1;
 2c2:	a9 2c       	mov	r10, r9
					status = 0;
				}
				state = MATCHING_HEADER;
 2c4:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 2c6:	05 2f       	mov	r16, r21
 2c8:	14 2f       	mov	r17, r20
 2ca:	92 cf       	rjmp	.-220    	; 0x1f0 <main+0xfe>
				if (sysex_commands[0] == 0x7f &&
				sysex_commands[1] == 0x00 &&
				bytes_read == 0) {
					// Reset.
					return;
				} else if (rx_buffer_index == SPM_PAGESIZE + 1 &&
 2cc:	31 e8       	ldi	r19, 0x81	; 129
 2ce:	e3 16       	cp	r14, r19
 2d0:	f1 04       	cpc	r15, r1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x1e4>
 2d4:	76 cf       	rjmp	.-276    	; 0x1c2 <main+0xd0>
 2d6:	2e 37       	cpi	r18, 0x7E	; 126
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x1ea>
 2da:	78 cf       	rjmp	.-272    	; 0x1cc <main+0xda>
				sysex_commands[0] == 0x7e &&
 2dc:	2a 81       	ldd	r18, Y+2	; 0x02
 2de:	21 11       	cpse	r18, r1
 2e0:	7a cf       	rjmp	.-268    	; 0x1d6 <main+0xe4>
				sysex_commands[1] == 0x00 ) {
					if (rx_buffer[rx_buffer_index - 1] != checksum) {
 2e2:	ec e8       	ldi	r30, 0x8C	; 140
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	20 81       	ld	r18, Z
 2e8:	28 15       	cp	r18, r8
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <main+0x1fe>
    PORTE &= ~(1<<R_LED);
  } else if (val == 1) {
    PORTC |= (1<<Y_LED);
	PORTE &= ~(1<<R_LED);
  } else if (val == 2) {
    PORTC &= ~(1<<Y_LED);
 2ec:	42 98       	cbi	0x08, 2	; 8
    PORTE |= (1<<R_LED);
 2ee:	72 9a       	sbi	0x0e, 2	; 14
}

inline void write_buffer_to_flash() {
	uint16_t i;
	const uint8_t* p = rx_buffer;
	eeprom_busy_wait();
 2f0:	f9 99       	sbic	0x1f, 1	; 31
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <main+0x1fe>

	boot_page_erase(page);
 2f4:	40 90 0a 01 	lds	r4, 0x010A
 2f8:	50 90 0b 01 	lds	r5, 0x010B
 2fc:	f2 01       	movw	r30, r4
 2fe:	60 92 57 00 	sts	0x0057, r6
 302:	e8 95       	spm
	boot_spm_busy_wait();
 304:	07 b6       	in	r0, 0x37	; 55
 306:	00 fc       	sbrc	r0, 0
 308:	fd cf       	rjmp	.-6      	; 0x304 <main+0x212>
 30a:	2c e0       	ldi	r18, 0x0C	; 12
 30c:	31 e0       	ldi	r19, 0x01	; 1
 30e:	b2 01       	movw	r22, r4
 310:	6e 50       	subi	r22, 0x0E	; 14
 312:	71 40       	sbci	r23, 0x01	; 1
 314:	6b 01       	movw	r12, r22

	for (i = 0; i < SPM_PAGESIZE; i += 2) {
		uint16_t w = *p++;
 316:	f9 01       	movw	r30, r18
 318:	60 81       	ld	r22, Z
 31a:	2e 5f       	subi	r18, 0xFE	; 254
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	f9 01       	movw	r30, r18
 320:	ec 0d       	add	r30, r12
 322:	fd 1d       	adc	r31, r13
 324:	fc 83       	std	Y+4, r31	; 0x04
 326:	eb 83       	std	Y+3, r30	; 0x03
 328:	89 01       	movw	r16, r18
 32a:	01 50       	subi	r16, 0x01	; 1
 32c:	11 09       	sbc	r17, r1
		w |= (*p++) << 8;
 32e:	f8 01       	movw	r30, r16
 330:	10 81       	ld	r17, Z
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	71 2b       	or	r23, r17
		boot_page_fill(page + i, w);
 336:	eb 81       	ldd	r30, Y+3	; 0x03
 338:	fc 81       	ldd	r31, Y+4	; 0x04
 33a:	0b 01       	movw	r0, r22
 33c:	90 92 57 00 	sts	0x0057, r9
 340:	e8 95       	spm
 342:	11 24       	eor	r1, r1
	eeprom_busy_wait();

	boot_page_erase(page);
	boot_spm_busy_wait();

	for (i = 0; i < SPM_PAGESIZE; i += 2) {
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	2c 38       	cpi	r18, 0x8C	; 140
 348:	3f 07       	cpc	r19, r31
 34a:	29 f7       	brne	.-54     	; 0x316 <main+0x224>
		uint16_t w = *p++;
		w |= (*p++) << 8;
		boot_page_fill(page + i, w);
	}

	boot_page_write(page);
 34c:	f2 01       	movw	r30, r4
 34e:	30 92 57 00 	sts	0x0057, r3
 352:	e8 95       	spm
	boot_spm_busy_wait();
 354:	07 b6       	in	r0, 0x37	; 55
 356:	00 fc       	sbrc	r0, 0
 358:	fd cf       	rjmp	.-6      	; 0x354 <main+0x262>
	boot_rww_enable();
 35a:	20 92 57 00 	sts	0x0057, r2
 35e:	e8 95       	spm
    PORTE &= ~(1<<R_LED);
  } else if (val == 1) {
    PORTC |= (1<<Y_LED);
	PORTE &= ~(1<<R_LED);
  } else if (val == 2) {
    PORTC &= ~(1<<Y_LED);
 360:	42 98       	cbi	0x08, 2	; 8
    PORTE |= (1<<R_LED);
 362:	72 9a       	sbi	0x0e, 2	; 14
					if (rx_buffer[rx_buffer_index - 1] != checksum) {
						write_status_leds(2);
					}
                    // Block write.
					write_buffer_to_flash();
					page += SPM_PAGESIZE;
 364:	20 91 0a 01 	lds	r18, 0x010A
 368:	30 91 0b 01 	lds	r19, 0x010B
 36c:	20 58       	subi	r18, 0x80	; 128
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	30 93 0b 01 	sts	0x010B, r19
 374:	20 93 0a 01 	sts	0x010A, r18
					++progress_counter;
 378:	73 94       	inc	r7
					if (progress_counter == 32) {
 37a:	f0 e2       	ldi	r31, 0x20	; 32
 37c:	7f 12       	cpse	r7, r31
 37e:	30 cf       	rjmp	.-416    	; 0x1e0 <main+0xee>
						status |= current_led;
						current_led <<= 1;
 380:	aa 0c       	add	r10, r10
						if (current_led == 0) {
 382:	09 f0       	breq	.+2      	; 0x386 <main+0x294>
 384:	31 cf       	rjmp	.-414    	; 0x1e8 <main+0xf6>
							current_led = 1;
							status = 0;
						}
						progress_counter = 0;
 386:	7b 2c       	mov	r7, r11
					++progress_counter;
					if (progress_counter == 32) {
						status |= current_led;
						current_led <<= 1;
						if (current_led == 0) {
							current_led = 1;
 388:	a9 2c       	mov	r10, r9
					status ^= current_led;
					} else {
					current_led = 1;
					status = 0;
				}
				state = MATCHING_HEADER;
 38a:	7b 2d       	mov	r23, r11
				bytes_read = 0;
 38c:	05 2f       	mov	r16, r21
 38e:	14 2f       	mov	r17, r20
 390:	2f cf       	rjmp	.-418    	; 0x1f0 <main+0xfe>
}

inline void write_status_leds(uint8_t pattern) {
  uint8_t val = pattern % 4;
  if (val == 0) {
    PORTC &= ~(1<<Y_LED);
 392:	42 98       	cbi	0x08, 2	; 8
    PORTE &= ~(1<<R_LED);
 394:	72 98       	cbi	0x0e, 2	; 14
 396:	2f ef       	ldi	r18, 0xFF	; 255
 398:	37 ea       	ldi	r19, 0xA7	; 167
 39a:	61 e6       	ldi	r22, 0x61	; 97
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	30 40       	sbci	r19, 0x00	; 0
 3a0:	60 40       	sbci	r22, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x2aa>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x2b4>
 3a6:	00 00       	nop
		_delay_ms(2000);
		midi_rx_loop();
		write_status_leds(0);
		_delay_ms(2000);
	}
    main_entry_point();
 3a8:	e0 91 08 01 	lds	r30, 0x0108
 3ac:	f0 91 09 01 	lds	r31, 0x0109
 3b0:	09 95       	icall
}
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	df 90       	pop	r13
 3cc:	cf 90       	pop	r12
 3ce:	bf 90       	pop	r11
 3d0:	af 90       	pop	r10
 3d2:	9f 90       	pop	r9
 3d4:	8f 90       	pop	r8
 3d6:	7f 90       	pop	r7
 3d8:	6f 90       	pop	r6
 3da:	5f 90       	pop	r5
 3dc:	4f 90       	pop	r4
 3de:	3f 90       	pop	r3
 3e0:	2f 90       	pop	r2
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
